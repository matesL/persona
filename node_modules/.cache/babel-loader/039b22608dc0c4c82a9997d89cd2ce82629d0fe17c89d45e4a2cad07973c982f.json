{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:8080/\";\nconst instance = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true // 开启跨域请求\n});\n\nclass AxiosHttp {\n  constructor(config) {\n    this.service = axios.create();\n    this.service(config);\n    //请求处理\n    this.service.instance.request.use(request => {\n      return {\n        ...request,\n        headers: {\n          ...request.headers,\n          token: '22222'\n        }\n      };\n    }, err => {\n      console.log(err);\n    });\n    //响应处理\n    this.service.instance.response.use(response => {\n      const {\n        data,\n        code\n      } = response;\n      if (code !== 200) {}\n      return data;\n    }, err => {\n      console.log(err);\n    });\n  }\n  // const request = async (options) => {\n  //   const { url, method, data, noAuth } = options;\n  //   const headers = {\n  //     \"Content-Type\": \"application/json\"\n  //   };\n  //   if (!noAuth) {\n  //     // 添加需要的认证头部信息\n  //   }\n  //   const response = await instance({\n  //     baseURL: API_BASE_URL,\n  //     url,\n  //     method,\n  //     data,\n  //     headers,\n  //   }); \n\n  //   return response;\n  // };\n}\n\nexport default AxiosHttp(instance);","map":{"version":3,"names":["axios","API_BASE_URL","instance","create","baseURL","withCredentials","AxiosHttp","constructor","config","service","request","use","headers","token","err","console","log","response","data","code"],"sources":["E:/vsCode/react—list/my-app/src/api/request.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8080/\";\r\nconst instance = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    withCredentials: true, // 开启跨域请求\r\n  });\r\nclass AxiosHttp {\r\n  service = axios.create()\r\n  constructor(config){\r\n  this.service(config)\r\n  //请求处理\r\n  this.service.instance.request.use(\r\n    (request)=>{\r\n\r\n      return {...request,headers:{...request.headers,token:'22222'}}\r\n    },\r\n    (err)=>{\r\n      console.log(err);\r\n    }\r\n   )\r\n   //响应处理\r\n   this.service.instance.response.use(\r\n    (response)=>{\r\n      const {data,code} = response\r\n      if(code !== 200){\r\n\r\n      }\r\n      return data\r\n    },\r\n    (err)=>{\r\n      console.log(err);\r\n    }\r\n   )\r\n}\r\n// const request = async (options) => {\r\n//   const { url, method, data, noAuth } = options;\r\n//   const headers = {\r\n//     \"Content-Type\": \"application/json\"\r\n//   };\r\n//   if (!noAuth) {\r\n//     // 添加需要的认证头部信息\r\n//   }\r\n//   const response = await instance({\r\n//     baseURL: API_BASE_URL,\r\n//     url,\r\n//     method,\r\n//     data,\r\n//     headers,\r\n//   }); \r\n \r\n//   return response;\r\n// };\r\n}\r\n\r\nexport default AxiosHttp(instance);"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,wBAAwB;AAC7C,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC1BC,OAAO,EAAEH,YAAY;EACrBI,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AACJ,MAAMC,SAAS,CAAC;EAEdC,WAAWA,CAACC,MAAM,EAAC;IAAA,KADnBC,OAAO,GAAGT,KAAK,CAACG,MAAM,EAAE;IAExB,IAAI,CAACM,OAAO,CAACD,MAAM,CAAC;IACpB;IACA,IAAI,CAACC,OAAO,CAACP,QAAQ,CAACQ,OAAO,CAACC,GAAG,CAC9BD,OAAO,IAAG;MAET,OAAO;QAAC,GAAGA,OAAO;QAACE,OAAO,EAAC;UAAC,GAAGF,OAAO,CAACE,OAAO;UAACC,KAAK,EAAC;QAAO;MAAC,CAAC;IAChE,CAAC,EACAC,GAAG,IAAG;MACLC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CACD;IACD;IACA,IAAI,CAACL,OAAO,CAACP,QAAQ,CAACe,QAAQ,CAACN,GAAG,CAChCM,QAAQ,IAAG;MACV,MAAM;QAACC,IAAI;QAACC;MAAI,CAAC,GAAGF,QAAQ;MAC5B,IAAGE,IAAI,KAAK,GAAG,EAAC,CAEhB;MACA,OAAOD,IAAI;IACb,CAAC,EACAJ,GAAG,IAAG;MACLC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CACD;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;AACA;;AAEA,eAAeR,SAAS,CAACJ,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}